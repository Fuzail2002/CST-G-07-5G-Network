# -
*
- coding: utf-8 -
*
-
"""AI Based Traffic Prediction. ipynb
Automatically generated by Colab.
Original file is located at
https://colab.research.google.com/drive/1Y4oelEUvc7S4lJVyhTZxsxYph1PSOLo3
"""
#pip install numpy pandas scikit-learn tensorflow keras flask plotly seaborn matplotlib
import numpy as np
import pandas as pd
# Simulating 5G network traffic data
np.random.seed(42)
data_size = 1000 # Number of samples
traffic_data = pd.DataFrame({
'timestamp': pd.date_range(start='1/1/2024', periods=data_size, freq='T'),
'latency': np.random.uniform(10, 100, data_size), # in ms
'jitter': np.random.uniform(1, 20, data_size), # in ms
'packet_loss': np.random.uniform(0, 5, data_size), # in percentage
'bandwidth_usage': np.random.uniform(10, 100, data_size) # in Mbps
})
# Save data to CSV
traffic_data.to_csv('D:\khale\Downloads\Telegram Desktop\data.csv', index=False)
print("✅ Simulated traffic data saved in Colab!")
"""Final Output
• The script simulates realistic 5G network traffic data for analysis.
• The generated CSV file can be used for machine learning models, data
analysis, or traffic pattern forecasting.
"""
from sklearn.preprocessing import MinMaxScaler
# Load the dataset
df = pd.read_csv('D:\khale\Downloads\Telegram Desktop\data.csv')
df['timestamp'] = pd.to_datetime(df['timestamp'])
# Normalize feature values
scaler = MinMaxScaler()
df[['latency', 'jitter', 'packet_loss', 'bandwidth_usage']] = scaler.fit_transform(df[['latency',
'jitter', 'packet_loss', 'bandwidth_usage']])
# Prepare time-series dataset for LSTM
def create_sequences(data, seq_length=10):
X, y = [], []
for i in range(len(data) - seq_length):
X.append(data.iloc[i:i+seq_length].values)
y.append(data.iloc[i+seq_length].values)
return np.array(X), np.array(y)
sequence_length = 10
X, y = create_sequences(df[['latency', 'jitter', 'packet_loss', 'bandwidth_usage']],
sequence_length)
print(f"✅ Training Data Shape: {X.shape}, Labels Shape: {y.shape}")
"""This script loads, preprocesses, and prepares 5G traffic data for training an LSTM (Long Short-Term Memory) neural network. Let’s break it down step by step:
Summary of Code Functionality
1. Loads and preprocesses the dataset.
2. 3. 4. 5. Normalizes data using MinMaxScaler (0 to 1 scaling).
Creates time-series sequences for LSTM training.
Prepares input (X) and target (y) datasets.
Prints dataset shapes to verify correctness.
This prepares the data for training an LSTM model for 5G traffic prediction.
"""
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
# Define LSTM model
model = Sequential([
LSTM(50, return_sequences=True, input_shape=(sequence_length, 4)),
Dropout(0.2),
LSTM(50),
Dense(4, activation='linear') # Predicts latency, jitter, packet loss, and bandwidth usage
])
model.compile(optimizer='adam', loss='mse')
# Train the model
model.fit(X, y, epochs=20, batch_size=16, validation_split=0.2)
# Save the model
model.save('D:\khale\Downloads\Telegram Desk\5G_traffic_model.h5')
print("✅ Model trained and saved in Colab!")
The LSTM model:
1. Learns traffic patterns from past data (latency, jitter, packet loss, bandwidth
usage).
2. 3. 4. 5. 6. Predicts future network conditions (for smart traffic management).
Uses dropout to prevent overfitting.
Optimizes using Adam and Mean Squared Error loss.
Trains on 80% of data, validates on 20%.
Saves the trained model for future use.
"""
def optimize_traffic(predicted_values):
latency, jitter, packet_loss, bandwidth_usage = predicted_values
action = "No action needed"
if latency > 0.7 or jitter > 0.6 or packet_loss > 0.5: # Thresholds (normalized)
action = "Increase bandwidth allocation, reroute traffic via SDN"
elif bandwidth_usage < 0.3:
action = "Reduce bandwidth allocation to optimize resources"
return action
# Example usage
sample_input = np.array([[0.8, 0.7, 0.6, 0.5]]) # Simulated prediction
action = optimize_traffic(sample_input[0])
print(f"✅ Recommended Action: {action}")
"""This function analyzes predicted traffic conditions and suggests actions to optimize
network performance based on predefined thresholds.
Summary
1. Analyzes predicted network conditions.
2. 3. Recommends action based on predefined thresholds.
Suggests increasing bandwidth & rerouting when congestion is high.
4. Optimizes resource allocation when bandwidth usage is low.
"""
import plotly.graph_objects as go
def plot_network_data(df):
fig = go.Figure()
fig.add_trace(go.Scatter(x=df['timestamp'], y=df['latency'], mode='lines',
name='Latency'))
fig.add_trace(go.Scatter(x=df['timestamp'], y=df['jitter'], mode='lines', name='Jitter'))
fig.add_trace(go.Scatter(x=df['timestamp'], y=df['packet_loss'], mode='lines',
name='Packet Loss'))
fig.add_trace(go.Scatter(x=df['timestamp'], y=df['bandwidth_usage'], mode='lines',
name='Bandwidth Usage'))
fig.update_layout(title="Real-Time 5G Traffic Data", xaxis_title="Time",
yaxis_title="Values")
fig.show()
plot_network_data(df.tail(100)) # Show the last 100 data points
"""What this function does:
1. Creates an interactive line chart using Plotly.
2. Plots four key network metrics:
• Latency
• Jitter
• Packet Loss
• Bandwidth Usage
3. Labels axes and legend for clarity.
4. Displays the last 100 records for real-time monitoring.
This visualization helps in identifying traffic patterns and anomalies in a 5G network
"""
from google.colab import files
files.download('/content/5G_traffic_data.csv')
files.download('/content/5G_traffic_model.h5')
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(8,6))
sns.heatmap(df[['latency', 'jitter', 'packet_loss', 'bandwidth_usage']].corr(), annot=True,
cmap='coolwarm', linewidths=1)
plt.title("Correlation Heatmap of 5G Network Metrics")
plt.show()
plt.figure(figsize=(12,6))
sns.boxplot(data=df[['latency', 'jitter', 'packet_loss', 'bandwidth_usage']])
plt.title("Boxplot of Network Metrics (Latency, Jitter, Packet Loss, Bandwidth Usage)")
plt.show()
